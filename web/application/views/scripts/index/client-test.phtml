<html>
<head>
    <script language="javascript"
    src="<?php echo $this->serverUrl() .  $this->baseUrl(); ?>/js/jquery-1.3.min.js"></script>
    <script language="javascript"
    src="<?php echo $this->serverUrl() .  $this->baseUrl(); ?>/js/json2.js"></script>
    <script language="javascript"
    src="<?php echo $this->serverUrl() .  $this->baseUrl(); ?>/js/jquery.zend.jsonrpc.js"></script>
<script>
<!--
    $(document).ready(function(){
        // TEST BASIC CALL -- this is the usual way, blocking request
        var testBasic = jQuery.Zend.jsonrpc({url: '../index/wsdl-test'});

        if(testBasic.add(1,1) == 2) {
            $('#basicTestResult').html('SUCCESS!');
        }

        // FLIP BASIC REQUEST INTO ASYNC AND TEST
        testBasic.setAsyncSuccess(function(val) {
            if(val) {
                $('#asyncTestResult').html('SUCCESS!');
            } else {
                $('#asyncTestResult').html('FALSE SUCCESS!');
            }
        }).setAsyncError(function() {
            $('#asyncTestResult').html('FAIL!');
        }).setAsync(true);

        testBasic.hang(10);
        $('#asyncTestResult').html('Waiting 10 seconds...');

        // ASYNC SMD REFLECT + ASYNC CALL
        var testAsync = jQuery.Zend.jsonrpc({
            url: '../index/wsdl-test?hang=10',
            async: true,
            success: function(val) {
                if(val) {
                    $('#asyncTestReflect').html('SUCCESS!');
                } else {
                    $('#asyncTestReflect').html('FALSE SUCCESS!');
                }
            },
            error: function() {
                $('#asyncTestReflect').html('SECOND STAGE FAIL');
            },
            asyncReflect: true,
            reflectSuccess: function(rpcme) {
                $('#asyncTestReflect').html('STAGE ONE SUCCESS: DOING CALL (10 sec)');
                rpcme.hang(10);
            },
            reflectError: function() {
                $('#asyncTestReflect').html('REFLECT STAGE FAIL');
            }
        });
        $('#asyncTestResult').html('Waiting 10 seconds...');

        // TEST PREBUILT SMD
        var testPremadeSmd = jQuery.Zend.jsonrpc({
            url: '../',
            smd: {"transport":"POST","envelope":"JSON-RPC-2.0","contentType":"application\/json","SMDVersion":"2.0","target":"\/atezate\/web\/public\/","services":{"add":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"integer","name":"x","optional":false},{"type":"integer","name":"y","optional":false}],"returns":"integer"},"subtract":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"integer","name":"x","optional":false},{"type":"integer","name":"y","optional":false}],"returns":"integer"},"multiply":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"integer","name":"x","optional":false},{"type":"integer","name":"y","optional":false}],"returns":"integer"},"divide":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"integer","name":"x","optional":false},{"type":"integer","name":"y","optional":false}],"returns":"float"},"hang":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"integer","name":"sleepTime","optional":false}],"returns":"boolean"},"explode":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[],"returns":"null"},"arrayTest":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"array","name":"arr","optional":false}],"returns":"null"}},"methods":{"add":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"integer","name":"x","optional":false},{"type":"integer","name":"y","optional":false}],"returns":"integer"},"subtract":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"integer","name":"x","optional":false},{"type":"integer","name":"y","optional":false}],"returns":"integer"},"multiply":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"integer","name":"x","optional":false},{"type":"integer","name":"y","optional":false}],"returns":"integer"},"divide":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"integer","name":"x","optional":false},{"type":"integer","name":"y","optional":false}],"returns":"float"},"hang":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"integer","name":"sleepTime","optional":false}],"returns":"boolean"},"explode":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[],"returns":"null"},"arrayTest":{"envelope":"JSON-RPC-2.0","transport":"POST","parameters":[{"type":"array","name":"arr","optional":false}],"returns":"null"}}}
        });

        if(testPremadeSmd.add(2,2) == 4) {
            $('#smdTestResult').html('SUCCESS!');
        }

        // TEST INDIVIDUAL CALLBACKS
        var testIndividual = jQuery.Zend.jsonrpc({url: '../index/wsdl-test',async: true});

        testIndividual.hang(10,{
                success: function(ret, id, method) {
                        $('#indyCallbackResult').html('SUCCESS!');
                },
                error: function() {
                        $('#indyCallbackResult').html('FAIL!');
                }
        });

        testIndividual.add(2,2,{
                success: function(ret, id, method) {
                            $('#indyCallbackResult').html('First stage success...wait 10 seconds');
                },
                error: function() {
                        $('#indyCallbackResult').html('First stage FAIL!');
                }
        });

        // Test exception throwing
        var testException = jQuery.Zend.jsonrpc(
                                {url: '../index/wsdl-test',
                                 exceptionHandler: function(err) {
                                     if(err.message == 'BOOM') {
                                        $('#exceptionResult').html('SUCCESS!');
                                    } else {
                                        $('#exceptionResult').html('Got unexpected return');
                                    }
                                }});
        testException.explode();

        // Test async exception throwing
        var testAsyncException = jQuery.Zend.jsonrpc({url: '../index/wsdl-test',async: true});

        testAsyncException.explode({
            success: function(ret, id, method) {
                $('#asyncExceptionResult').html('FAIL (called success)');
            },
            error: function(error) {
                $('#asyncExceptionResult').html('FAIL (called error)');
            },
            exceptionHandler: function(exp) {
                $('#asyncExceptionResult').html('SUCCESS!');
            }
        });

        // Test array send
        var testArraySend = jQuery.Zend.jsonrpc({url: '../index/wsdl-test'});

        if(testArraySend.arrayTest({hi: 1, there: 2})) {
            $('#arrayResult').html('SUCCESS!');
        } else {
            $('#arrayResult').html('FAIL');
        }
    });

-->
</script>

</head>
<body>
<p>
  Testing RPC features:
</p>
<ul>
  <li>Test basic RPC: <span id="basicTestResult">Wait...</span></li>
  <li>Test async request: <span id="asyncTestResult">Wait...</span></li>
  <li>Test async reflect: <span id="asyncTestReflect">Wait...</span></li>
  <li>Test cached SMD: <span id="smdTestResult">Wait...</span></li>
  <li>Test async individual callbacks: <span id="indyCallbackResult">Wait...</span></li>
  <li>Test exception handling: <span id="exceptionResult">Wait...</span></li>
  <li>Test async callback exception handling: <span id="asyncExceptionResult">Wait...</span></li>
  <li>Test sending an array: <span id="arrayResult">Wait...</span></li>
</ul>
</body>
</html>
